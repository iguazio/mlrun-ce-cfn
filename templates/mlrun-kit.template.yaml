AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy Iguazio MLRun Kit to EKS cluster
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - EKSClusterName
          - ClusterDomain
          - REDISUrl

    ParameterLabels:
      EKSClusterName:
        default: EKS Cluster to deploy MLRun Kit
      ClusterDomain:
        default: DNS Domain
      REDISUrl:
        default: REDIS URL

Parameters:
  EKSClusterName:
    Type: String
  ClusterDomain:
    Description: "The EKS cluster DNS record will be added to this domain."
    Default: replace-me.com
    Type: String
    MinLength: 1
  REDISUrl:
    Description: The URL of the REDIS DB
    Default: redis-replace-me.com
    Type: String
  OIDCProvider:
    Type: String
  MLrunCeVersion:
    Description: (Optional) Override default (latest) Chart version
    Type: String
    Default: 1
  RemoteAccessCIDR:
    Default: "0.0.0.0/0"
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: CIDR IP range that is permitted to access the instances and the ingress (external URL). We recommend
      that you set this value to a trusted IP range.
    Type: String

Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }

Resources:
  MlrunBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Fn::Join:
          - '-'
          - - !Ref EKSClusterName
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      AccessControl: BucketOwnerFullControl
      PublicAccessBlockConfiguration:
        BlockPublicAcls: yes
        BlockPublicPolicy: yes
        IgnorePublicAcls: yes
        RestrictPublicBuckets: yes

  CAARecordSet:
    Type: "AWS::Route53::RecordSet"
    DeletionPolicy: Retain
    Properties:
      Comment: "Allow AWS to auto issue certificates for the domain"
      HostedZoneName: !Sub "${ClusterDomain}."
      Name: !Sub "${ClusterDomain}."
      Type: "CAA"
      TTL: "300"
      ResourceRecords:
        - "0 issue \"amazon.com\""

  HostedZoneId:
    Type: Custom::CliQuery
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-ResourceReader', {Prefix: !FindInMap [Config, Prefix, Value]}]
      AwsCliCommand: !Sub
      - |
        route53 list-hosted-zones-by-name --query "HostedZones[?Name=='${ClusterDomain}.'] | [0]"
      - ClusterDomain: !Ref ClusterDomain
      IdField: 'Id'

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    DependsOn:
      - CAARecordSet
      - HostedZoneId
    Properties:
      DomainName: !Sub "*.${EKSClusterName}.${ClusterDomain}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "*.${EKSClusterName}.${ClusterDomain}"
          HostedZoneId: !Select [2, !Split [ "/", !Ref HostedZoneId ]]

  MLRunNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    DeletionPolicy: Delete
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: mlrun
          selfLink: /api/v1/namespaces/mlrun
        spec:
          finalizers:
          - kubernetes

  AWSAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EKSClusterName}-mlrun
      AssumeRolePolicyDocument: !Sub |
        {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "${OIDCProvider}:aud": "sts.amazonaws.com",
                  "${OIDCProvider}:sub": [
                            "system:serviceaccount:mlrun:mlrun-jobs-sa",
                            "system:serviceaccount:mlrun:mlrun-api-aws",
                            "system:serviceaccount:mlrun:ml-pipeline-ui",
                            "system:serviceaccount:mlrun:ml-pipeline",
                            "system:serviceaccount:mlrun:argo"
                  ]
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OIDCProvider}"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSMarketplaceMeteringRegisterUsage

  MlrunS3Policy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - AWSAccessRole
    Properties:
      PolicyName: AccessS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: "s3:*"
          Effect: "Allow"
          Resource:
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref MlrunBucket
                - '/*'
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref MlrunBucket
      Roles:
        - !Ref AWSAccessRole

  MlrunECRPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - AWSAccessRole
    Properties:
      PolicyName: AccessECR
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudformation:Describe*'
              - 'cloudformation:List*'
              - 'cloudformation:Get*'
              - 'ecr:CreateRepository'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:BatchGetImage'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
            Resource: '*'
      Roles:
        - !Ref AWSAccessRole

  MLRunJobsSA:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: MLRunNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: mlrun-jobs-sa
          namespace: mlrun
          annotations:
            eks.amazonaws.com/role-arn: ${AWSAccessRole.Arn}

  MLRunApiAwsSa:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: MLRunNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: mlrun-api-aws
          namespace: mlrun
          annotations:
            eks.amazonaws.com/role-arn: ${AWSAccessRole.Arn}

  MLRunApiRole:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: MLRunNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          labels:
            app.kubernetes.io/component: api
            app.kubernetes.io/instance: mlrun-ce
          name: mlrun-api-role
          namespace: mlrun
        rules:
          - apiGroups:
              - ""
            resources:
              - pods
              - pods/exec
              - pods/log
              - services
              - secrets
              - configmaps
            verbs:
              - '*'
          - apiGroups:
              - kubeflow.org
            resources:
              - mpijobs
            verbs:
              - '*'
          - apiGroups:
              - sparkoperator.k8s.io
            resources:
              - sparkapplications
              - scheduledsparkapplications
            verbs:
              - '*'
  MLRunApiRB:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: MLRunNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          labels:
          name: mlrun-api-aws-rb
          namespace: mlrun
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: mlrun-api-role
        subjects:
        - kind: ServiceAccount
          name: mlrun-api-aws
          namespace: mlrun

  SparkRB:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: MLRunNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          labels:
            app.kubernetes.io/name: spark-operator
            app.kubernetes.io/version: v1beta2-1.3.7-3.1.1
          name: spark-cfn
          namespace: mlrun
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: spark-role
        subjects:
        - kind: ServiceAccount
          name: mlrun-jobs-sa
          namespace: mlrun

  MLRunHelmChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: 
      - MLRunNamespace
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: mlrun-ce
      Chart: mlrun-ce
      Namespace: mlrun
      TimeOut: 30
      Version: !Ref MLrunCeVersion
      Repository: https://mlrun.github.io/ce
      ValueYaml: !Sub |
        global:
          registry:
            url: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"
        nuclio:
          platform:
            kube:
              defaultFunctionServiceAccount: mlrun-jobs-sa
          registry: 
            pushPullUrl: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"
          dashboard:
            containerBuilderKind: kaniko
            imageNamePrefixTemplate: "${EKSClusterName}-{{ .ProjectName }}-{{ .FunctionName }}-"
        mlrun:
          serviceAccounts:
            api:
              create: false
              name: mlrun-api-aws
          nuclio:
            uiURL:  "https://nuclio.${EKSClusterName}.${ClusterDomain}"
          storage: filesystem
          ui:
            service:
              type: ClusterIP
              nodePort: ""          
          api:
            service:
              type: ClusterIP
              nodePort: ""
            fullnameOverride: mlrun-api
            persistence:
              enabled: true
              annotations: ~
              storageClass: aws-efs
            envFrom:
              - configMapRef:
                  name: mlrun-override-env
                  optional: true
            extraEnv:
              - name: S3_NON_ANONYMOUS
                value: "true"
              - name: MLRUN_DEFAULT_TENSORBOARD_LOGS_PATH
                value: /home/jovyan/data/tensorboard/{{ `{{project}} `}}
              - name: MLRUN_CE__MODE
                value: lite
              - name: MLRUN_SPARK_OPERATOR_VERSION
                value: spark-3
              - name: MLRUN_STORAGE__AUTO_MOUNT_TYPE
                value: s3
              - name: MLRUN_STORAGE__AUTO_MOUNT_PARAMS
                value: "non_anonymous=True"
              - name: MLRUN_FUNCTION__SPEC__SERVICE_ACCOUNT__DEFAULT
                value: mlrun-jobs-sa
              - name: MLRUN_HTTPDB__PROJECTS__FOLLOWERS
                value: nuclio
              - name: MLRUN_HTTPDB__REAL_PATH
                value: s3://
              - name: MLRUN_ARTIFACT_PATH
                value: s3://${MlrunBucket}/projects/{{run.project}}/artifacts/
              - name: MLRUN_SPARK_APP_IMAGE
                value: gcr.io/iguazio/spark-app
              - name: MLRUN_SPARK_APP_IMAGE_TAG
                value: v3.2.1-mlk
              - name: MLRUN_KFP_URL
                value: http://ml-pipeline.mlrun.svc.cluster.local:8888
              - name: MLRUN_REDIS_URL
                value: ${REDISUrl}
          db:
            persistence:
              enabled: true
              annotations: ~
              storageClass: aws-efs
          httpDB:
            dbType: mysql
            dsn: mysql+pymysql://root@mlrun-db:3306/mlrun
            oldDsn: sqlite:////mlrun/db/mlrun.db?check_same_thread=false

        jupyterNotebook:
          awsInstall: true
          service:
            type: ClusterIP
            nodePort: ""
            port: 8888          
          serviceAccount:
            create: false
            name: mlrun-jobs-sa
          mlrunUIURL:  https://mlrun.${EKSClusterName}.${ClusterDomain}
          persistence:
            enabled: true
            annotations: ~
            storageClass: aws-efs
          envFrom: ~
          extraEnv:
              - name: S3_NON_ANONYMOUS
                value: "true"
              - name: MLRUN_HTTPDB__REAL_PATH
                value: s3://
              - name: MLRUN_STORAGE__AUTO_MOUNT_TYPE
                value: s3
              - name: MLRUN_STORAGE__AUTO_MOUNT_PARAMS
                value: "non_anonymous=True"
              - name: MLRUN_FUNCTION__SPEC__SERVICE_ACCOUNT__DEFAULT
                value: mlrun-jobs-sa
              - name: MLRUN_ARTIFACT_PATH
                value: s3://${MlrunBucket}/projects/{{run.project}}/artifacts/
              - name: MLRUN_CE
                value: "true"

        minio:
          service:
            type: ClusterIP
            port: 9000
            nodePort: ""
          consoleService:
            type: ClusterIP
            port: 9001
            nodePort: ""        
          enabled: true
          rootUser: minio
          rootPassword: minio123
          mode: distributed
          replicas: 4
          resources:
            requests:
              memory: 0.5Gi
          persistence:
            enabled: true
            storageClass: aws-efs
            size: 1Gi
          buckets: []
          users: []
        spark-operator:
          enabled: true
          fullnameOverride: spark-operator
          webhook:
             enable: true

        pipelines:
          service:
            type : ClusterIP
            nodePort: ""        
          enabled: true
          name: pipelines
          persistence:
            enabled: true
            existingClaim:
            storageClass: aws-efs
            accessMode: "ReadWriteOnce"
            size: "20Gi"
            annotations: ~
          db:
            username: root
          minio:
            enabled: true
            accessKey: "minio"
            secretKey: "minio123"
            endpoint: "minio.mlrun.svc.cluster.local"
            endpointPort: "9000"
            bucket: "mlrun"
          images:
            argoexec:
              repository: gcr.io/ml-pipeline/argoexec
              tag: v3.3.8-license-compliance
            workflowController:
              repository: gcr.io/ml-pipeline/workflow-controller
              tag: v3.3.8-license-compliance
            apiServer:
              repository: gcr.io/ml-pipeline/api-server
              tag: 1.8.3
            persistenceagent:
              repository: gcr.io/ml-pipeline/persistenceagent
              tag: 1.8.3
            scheduledworkflow:
              repository: gcr.io/ml-pipeline/scheduledworkflow
              tag: 1.8.3
            ui:
              repository: gcr.io/ml-pipeline/frontend
              tag: 1.8.3
            viewerCrdController:
              repository: gcr.io/ml-pipeline/viewer-crd-controller
              tag: 1.8.3
            visualizationServer:
              repository: gcr.io/ml-pipeline/visualization-server
              tag: 1.8.3
            metadata:
              container:
                repository: gcr.io/tfx-oss-public/ml_metadata_store_server
                tag: 1.5.0
            metadataEnvoy:
              repository: gcr.io/ml-pipeline/metadata-envoy
              tag: 1.8.3
            metadataWriter:
              repository: gcr.io/ml-pipeline/metadata-writer
              tag: 1.8.3
            mysql:
              repository: mysql
              tag: 5.7-debian
            cacheImage:
              repository: gcr.io/google-containers/busybox
              tag: latest

        kube-prometheus-stack:
          fullnameOverride: monitoring
          enabled: false
          alertmanager:
            enabled: false
          grafana:
            persistence:
              type: pvc
              enabled: true
              size: 10Gi
              storageClassName: aws-efs
            grafana.ini:
              auth.anonymous:
                enabled: true
                org_role: Editor
              security:
                disable_initial_admin_creation: true
            fullnameOverride: grafana
            enabled: true
            service:
              type: NodePort
              nodePort: 30110
          prometheus:
            enabled: true
          kube-state-metrics:
            fullnameOverride: state-metrics
          prometheus-node-exporter:
            fullnameOverride: node-exporter

  KubePrometheusStack:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn:
      - MLRunHelmChart
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: monitoring
      Chart: kube-prometheus-stack
      Namespace: mlrun
      TimeOut: 30
      Repository: https://prometheus-community.github.io/helm-charts
      ValueYaml: !Sub |
        fullnameOverride: monitoring
        enabled: true
        alertmanager:
          enabled: false
        grafana:
          persistence:
            type: pvc
            enabled: true
            size: 10Gi
            storageClassName: aws-efs
          grafana.ini:
            auth.anonymous:
              enabled: true
              org_role: Editor
            security:
              disable_initial_admin_creation: true
          fullnameOverride: grafana
          enabled: true
          service:
            type: NodePort
            nodePort: 30110
        prometheus:
          enabled: true
        kube-state-metrics:
          fullnameOverride: state-metrics
        prometheus-node-exporter:
          fullnameOverride: node-exporter

  MLRunIngress:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: 
      - MLRunNamespace
      - ACMCertificate
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Manifest: !Sub |
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          namespace: mlrun
          name: mlrun-ingress
          annotations:
            kubernetes.io/ingress.class: alb
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/target-type: ip
            alb.ingress.kubernetes.io/inbound-cidrs: ${RemoteAccessCIDR}
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
            alb.ingress.kubernetes.io/certificate-arn: ${ACMCertificate}
        spec:
          rules:
          - host: mlrun.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: mlrun-ui
                    port:
                      number: 80
                path: /*
                pathType: ImplementationSpecific
          - host: mlrun-api.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: mlrun-api
                    port:
                      number: 8080
                path: /*
                pathType: ImplementationSpecific
          - host: nuclio.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: nuclio-dashboard
                    port:
                      number: 8070
                path: /*
                pathType: ImplementationSpecific
          - host: jupyter.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: mlrun-jupyter
                    port:
                      number: 8888
                path: /*
                pathType: ImplementationSpecific
          - host: grafana.${EKSClusterName}.${ClusterDomain}
            http:
              paths:
              - backend:
                  service:
                    name: grafana
                    port:
                      number: 80
                path: /*
                pathType: ImplementationSpecific
  MLRunIngressHostname:
    Type: "AWSQS::Kubernetes::Get"
    DependsOn: MLRunIngress
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: mlrun
      Name: ingress/mlrun-ingress
      JsonPath: "{.status.loadBalancer.ingress[0].hostname}"

  ALBRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: 
      - MLRunIngressHostname
    Properties:
      Comment: DNS record for EKS ALB
      HostedZoneName: !Sub "${ClusterDomain}."
      Name: !Sub "*.${EKSClusterName}.${ClusterDomain}."
      Type: CNAME
      TTL: "300"
      ResourceRecords:
        - !GetAtt MLRunIngressHostname.Response

Outputs:
  MLRunUI:
    Value: !Sub https://mlrun.${EKSClusterName}.${ClusterDomain}
  MLRunAPI:
    Value: !Sub https://mlrun-api.${EKSClusterName}.${ClusterDomain}
  Nuclio: 
    Value: !Sub https://nuclio.${EKSClusterName}.${ClusterDomain}
  JupyterNotebook:
    Value: !Sub https://jupyter.${EKSClusterName}.${ClusterDomain}
  Grafana:
    Value: !Sub https://grafana.${EKSClusterName}.${ClusterDomain}
  KubeConfig:
    Description: Run this command in your terminal to get access to your EKS cluster
    Value: !Sub aws eks update-kubeconfig --name=${EKSClusterName}
  S3Bucket:
    Description: This bucket has to be deleted manually after deleting the stack
    Value: !Ref MlrunBucket
